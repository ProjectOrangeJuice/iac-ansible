map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    return 444;
}

resolver 192.168.18.1 valid=30s;

# upstream backend {
#    server homeassistant.local max_fails=0 fail_timeout=0; 
#    server gateway.local max_fails=0 fail_timeout=0; 
#    server data.local max_fails=0 fail_timeout=0; 
#    server gemini-webfront.local max_fails=0 fail_timeout=0; 
# }



server {
    server_name bit.{{ domain_name }};

    # Ignore the tunnel ip
    set_real_ip_from 192.168.2.1; 
    real_ip_header X-Forwarded-For;

    client_max_body_size 1m;
   
    location  / {
        proxy_pass         http://password-vault.local;
        proxy_http_version 1.1;
    # Set headers for proxying WebSocket
    proxy_set_header   Upgrade $http_upgrade;
    proxy_set_header   Connection "upgrade";
    proxy_redirect     http:// $scheme://;

    # Set proxy headers
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Proto http;

    # The proxy must preserve the host because screego verifies it with the origin
    # for WebSocket connections
    proxy_set_header   Host $http_host;
    }


    listen 443 ssl; 
    ssl_certificate /etc/ssl/cert.crt; 
    ssl_certificate_key /etc/ssl/key.key;
}

server {
    server_name gemini.{{ domain_name }};

    # Ignore the tunnel ip
    set_real_ip_from 192.168.2.1; 
    real_ip_header X-Forwarded-For;

    location  / {
        proxy_connect_timeout 1s;  # Short initial connection timeout
        proxy_next_upstream error timeout; # Retry on errors and timeouts
        proxy_pass         http://gemini-webfront.local:9090;
               proxy_http_version 1.1;
    # Set headers for proxying WebSocket
    proxy_set_header   Upgrade $http_upgrade;
    proxy_set_header   Connection "upgrade";
    proxy_redirect     http:// $scheme://;

    # Set proxy headers
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Proto http;

    # The proxy must preserve the host because screego verifies it with the origin
    # for WebSocket connections
    proxy_set_header   Host $http_host;
    }


    listen 443;
    ssl_certificate /etc/ssl/cert.crt; 
    ssl_certificate_key /etc/ssl/key.key;
}


server {
  server_name audit.server.com;

    #   Ignore the tunnel ip
    set_real_ip_from 192.168.2.1; 
    real_ip_header X-Forwarded-For;

        location  / {

            proxy_pass         http://192.168.2.1:9090/audit;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;

        }


    listen 80; 
}


server {
    server_name home.{{ domain_name }};
 
    # Ignore the tunnel ip
    set_real_ip_from 192.168.2.1; 
    real_ip_header X-Forwarded-For;


    location  /auth/login_flow {
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;
        proxy_pass         http://homeassistant.local:8123;
        proxy_redirect     off;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;
    }

    location  / {
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;
        proxy_pass         http://homeassistant.local:8123;
        proxy_redirect     off;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;
    }


    listen 443 ssl; 
    ssl_certificate /etc/ssl/cert.crt; 
    ssl_certificate_key /etc/ssl/key.key;
}

server {
    server_name data.{{ domain_name }};

    # Ignore the tunnel ip
    set_real_ip_from 192.168.2.1; 
    real_ip_header X-Forwarded-For;

    gzip on;
    gzip_disable "msie6"; # Disable for old versions of Internet Explorer

# MIME types to compress
gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

   # Compression level: a number between 1 (least compression) and 9 (most compression)
   gzip_comp_level 9;
    
    location / {
        proxy_pass http://data.local:11000$request_uri;

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Forwarded-Scheme $scheme;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Accept-Encoding "";
        proxy_set_header Host $host;
    
        client_body_buffer_size 500M;
        proxy_read_timeout 86400s;
        client_max_body_size 0;

        # Websocket
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }


    listen 443 ssl; 
    ssl_certificate /etc/ssl/cert.crt; 
    ssl_certificate_key /etc/ssl/key.key;
}


server {
    if ($host = home.{{ domain_name }}) {
        return 301 https://$host$request_uri;
    } 


    server_name home.{{ domain_name }};
    listen 80;
    return 404; 


}

server {
    if ($host = bit.{{ domain_name }}) {
        return 301 https://$host$request_uri;
    } 

  server_name bit.{{ domain_name }};
    listen 80;
    return 404; 
  

}



server {
    if ($host = cloud.{{ domain_name }}) {
        return 301 https://$host$request_uri;
    } 


    server_name cloud.{{ domain_name }};
    listen 80;
    return 404; 
}

server {
    if ($host = data.{{ domain_name }}) {
        return 301 https://$host$request_uri;
    } 


    server_name data.{{ domain_name }};
    listen 80;
    return 404; 
}

