upstream backend {
    server 192.168.2.15:443 max_fails=0 fail_timeout=0;  
}

upstream gateway {
    server nginx-project-gateway-1:9090;
}


# Domain to backend mapping
map $host $upstream_backend {
    gemini.{{ domain_name }} https://backend;
    bit.{{ domain_name }} https://backend;
    home.{{ domain_name }} https://backend;
    data.{{ domain_name }} https://backend;
}



# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#

map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}


server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
     return 444;
}

limit_req_zone $binary_remote_addr zone=mylimit:5m rate=50r/s;
limit_req_zone $binary_remote_addr zone=highlimit:5m rate=250r/s;
limit_conn_zone $binary_remote_addr zone=limitconnbyaddr:20m;

server {
    server_name gemini.{{ domain_name }};
    limit_req zone=mylimit burst=20;

    auth_request /gateway;
        location = /gateway {
        # This address is where the gateway will be listening on
        proxy_pass http://nginx-project-gateway-1:9090/access;
        proxy_set_header Host $host;
        proxy_pass_request_body off; # no need to send the POST body
        proxy_set_header Content-Length "";
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
   
    location / {
        proxy_connect_timeout 1s;  # Short initial connection timeout
        proxy_next_upstream error timeout; # Retry on errors and timeouts
        proxy_pass $upstream_backend;  
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/gemini.{{ domain_name }}/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/gemini.{{ domain_name }}/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
    server_name bit.{{ domain_name }};
    limit_req zone=mylimit burst=20;
    
    auth_request /gateway;
        location = /gateway {
        # This address is where the gateway will be listening on
        proxy_pass http://nginx-project-gateway-1:9090/access;
        proxy_set_header Host $host;
        proxy_pass_request_body off; # no need to send the POST body
        proxy_set_header Content-Length "";
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    error_page 401 = @error401;
    location @error401 {
        return 404;
    }

    location / {
        proxy_connect_timeout 1s;  # Short initial connection timeout
        proxy_next_upstream error timeout; # Retry on errors and timeouts
        proxy_pass $upstream_backend;  
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/bit.{{ domain_name }}/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/bit.{{ domain_name }}/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
    server_name home.{{ domain_name }};
    limit_req zone=mylimit burst=20;
   
    auth_request /gateway;
        location = /gateway {
        # This address is where the gateway will be listening on
        proxy_pass http://nginx-project-gateway-1:9090/access;
        proxy_set_header Host $host;
        proxy_pass_request_body off; # no need to send the POST body
        proxy_set_header Content-Length "";
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    error_page 401 = @error401;
    location @error401 {
        return 404;
    }

    location / {
        proxy_connect_timeout 1s;  # Short initial connection timeout
        proxy_next_upstream error timeout; # Retry on errors and timeouts
        proxy_pass $upstream_backend;  
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_redirect     off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/home.{{ domain_name }}/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/home.{{ domain_name }}/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
    server_name data.{{ domain_name }};
    limit_req zone=mylimit burst=20;
   
    auth_request /gateway;
        location = /gateway {
        # This address is where the gateway will be listening on
        proxy_pass http://nginx-project-gateway-1:9090/access;
        proxy_set_header Host $host;
        proxy_pass_request_body off; # no need to send the POST body
        proxy_set_header Content-Length "";
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    error_page 401 = @error401;
    location @error401 {
        return 404;
    }

    location / {
        proxy_connect_timeout 1s;  # Short initial connection timeout
        proxy_next_upstream error timeout; # Retry on errors and timeouts
        proxy_pass $upstream_backend;  
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/data.{{ domain_name }}/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/data.{{ domain_name }}/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
    server_name unlock.{{ domain_name }};
    limit_req zone=mylimit burst=2;
   
        location  / {

            proxy_pass         http://nginx-project-gateway-1:9090/unlock;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;

        }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/unlock.{{ domain_name }}/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/unlock.{{ domain_name }}/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}


server {
    if ($host = unlock.{{ domain_name }}) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name unlock.{{ domain_name }};
    listen 80;
    return 404; # managed by Certbot
}

server {
    if ($host = gemini.{{ domain_name }}) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name gemini.{{ domain_name }};
    listen 80;
    return 404; # managed by Certbot
}

server {
    if ($host = bit.{{ domain_name }}) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name bit.{{ domain_name }};
    listen 80;
    return 404; # managed by Certbot
}

server {
    if ($host = home.{{ domain_name }}) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name home.{{ domain_name }};
    listen 80;
    return 404; # managed by Certbot
}

server {
    if ($host = data.{{ domain_name }}) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name data.{{ domain_name }};
    listen 80;
    return 404; # managed by Certbot
}